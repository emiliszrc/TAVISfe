@page "/mapRoutes"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Microsoft.AspNetCore.Builder.Extensions
@using Microsoft.AspNetCore.Routing
@using TravelManagerFE.Data
@using MapOptions = GoogleMapsComponents.Maps.MapOptions

<h1>Google Map</h1>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="350px" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<button @onclick="@RemoveRoute">Remove route</button>
<p>
    Duration: @_durationTotalString <br />
    Distance: @_distanceTotalString <br />
</p>
<button @onclick="@ShowTripSteps">Show steps</button>

@if (TravelStepsShown)
{
    @if (_directionsResult != null)
    {
        <p>
            @foreach (var route in _directionsResult.Routes)
            {
                @foreach (var let in route.Legs)
                {
                    <p>
                        <h>Routing from <b>@let.StartAddress</b> to <b>@let.EndAddress</b></h>
                        @for(var i=0; i<let.Steps.Count(); i++)
                        {
                            <div>@(i+1). @((MarkupString) let.Steps.ElementAt(i).Instructions)</div>
                        }
                    </p>
                }
            }
        </p>
    }
}

@functions
{
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    private DirectionsResult _directionsResult;
    private bool TravelStepsShown = false;

    [Parameter]
    public Trip trip { get; set; }

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 40.603629,
                Lng = -75.472518
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task mapCurrentTrip()
    {
        var waypoints = trip.Visits.Select(destination =>
            new DirectionsWaypoint()
            {
                Location = new LatLngLiteral(Convert.ToDouble(destination.Location.Longtitude.Replace('.', ',')),
                    Convert.ToDouble(destination.Location.Latitude.Replace('.', ','))),
                Stopover = true
            }).ToList();

        if (waypoints.Count < 2)
        {
            return;
        }


        var origin = waypoints.FirstOrDefault().Location;
        var destination = waypoints.LastOrDefault().Location;


        waypoints.Remove(waypoints.FirstOrDefault());
        waypoints.Remove(waypoints.LastOrDefault());

        var dr = new DirectionsRequest
        {
            Origin = origin,
            Destination = destination,
            Waypoints = waypoints,
            TravelMode = TravelMode.Driving,
            DrivingOptions = new DrivingOptions()
        };

        _directionsResult = await dirRend.Route(dr, new DirectionsRequestOptions()
        {
            StripLegsStepsLatLngs = false,
            StripOverviewPath = false,
            StripOverviewPolyline = false,
            StripLegsStepsPath = false,
            StripLegsSteps = false
        });

        if (_directionsResult == null)
        {
            return;
        }

        var routes = _directionsResult.Routes.SelectMany(x => x.Legs).ToList();

        foreach (var route in routes)
        {
            _durationTotalString += route.Duration?.Text;
            _distanceTotalString += route.Distance.Text;
        }
    }

    private async Task RemoveRoute()
    {
        await dirRend.SetDirections(null);
        await dirRend.SetMap(null);
    }

    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });

        await mapCurrentTrip();
    }

    private void ShowTripSteps()
    {
        TravelStepsShown = !TravelStepsShown;
    }

    public void map()
    {

    }
}
