@page "/mapRoutes"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Microsoft.AspNetCore.Builder.Extensions
@using Microsoft.AspNetCore.Routing
@using TravelManagerFE.Data
@using TravelManagerFE.Data.Models
@using MapOptions = GoogleMapsComponents.Maps.MapOptions
@using System.Globalization
@using Humanizer

@if (trip != null)
{
    <h1>Visits in order</h1>
}
<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="350px" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<div></div>
<br />
<br />
@if(trip != null)
{
<MatButton @onclick="@RemoveRoute">Remove route</MatButton>
<p>
    Duration: @_durationTotalString <br />
    Distance: @_distanceTotalString <br />
</p>
<MatButton @onclick="@ShowTripSteps">Show steps</MatButton>
}

@if (TravelStepsShown)
{
    @if (_directionsResult != null)
    {
        @*<p>
                @foreach (var route in _directionsResult.Routes)
                {
                    @foreach (var let in route.Legs)
                    {
                        <p>
                            <h>Routing from <b>@let.StartAddress</b> to <b>@let.EndAddress</b></h>
                            @for(var i=0; i<let.Steps.Count(); i++)
                            {
                                <div>@(i+1). @((MarkupString) let.Steps.ElementAt(i).Instructions)</div>
                            }
                        </p>
                    }
                }
            </p>*@
        <MatAccordion Multi="true">
            @foreach (var directionsLeg in _directionsResult.Routes.FirstOrDefault().Legs)
            {
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Routing from <b>@retrieveVisitByLatLngLiteral(directionsLeg.StartLocation).Location.Title</b>@* to <b>@retrieveVisitByLatLngLiteral(directionsLeg.EndLocation).Location.Title</b>*@</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        @for (var i = 0; i < directionsLeg.Steps.Count(); i++)
                        {
                            <div>@(i+1). @((MarkupString)directionsLeg.Steps.ElementAt(i).Instructions)</div>
                        }
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            }
        </MatAccordion>
    }
}

@functions
{
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    private DirectionsResult _directionsResult;
    private bool TravelStepsShown = false;

    [Parameter]
    public Trip trip { get; set; }
    [Parameter]
    public Visit visit { get; set; }

    private Stack<Marker> markers = new Stack<Marker>();

    private List<String> _events = new List<String>();

    private async Task AddMarker()
    {
        var visitLatLng = new LatLngLiteral
        {
            Lat = Double.Parse(visit.Location.Latitude, CultureInfo.InvariantCulture),
            Lng = Double.Parse(visit.Location.Longtitude, CultureInfo.InvariantCulture)
        };

        var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
        {
            Position = visitLatLng,
            Map = map1.InteropObject,
            Label = $"{visit.Location.Address}",
            Icon = new Icon()
            {
                Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            }
            //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
        });

        //await marker.SetMap(map1);

        //var map = await marker.GetMap();

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        //if (map == map1.InteropObject)
        //{
        //    Console.WriteLine("Yess");
        //}
        //else
        //{
        //    Console.WriteLine("Nooo");
        //}

        markers.Push(marker);

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            var markerLabel = await marker.GetLabel();
            _events.Add("click on " + markerLabel);
            StateHasChanged();

            e.Stop();
        });
    }

    protected override void OnInitialized()
    {
        var center = new LatLngLiteral();
        if (trip != null)
        {
            center = new LatLngLiteral
            {
                Lat = 40.603629,
                Lng = -75.472518
            };
        }
        else if (visit != null)
        {
            center = new LatLngLiteral
            {
                Lat = Double.Parse(visit.Location.Latitude, CultureInfo.InvariantCulture),
                Lng = Double.Parse(visit.Location.Longtitude, CultureInfo.InvariantCulture)
            };
        }

        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = center,
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task mapCurrentTrip()
    {
        var waypoints = trip.Visits.Select(destination =>
            new DirectionsWaypoint()
            {
                Location = new LatLngLiteral(Convert.ToDouble(destination.Location.Longtitude.Replace('.', ',')),
                    Convert.ToDouble(destination.Location.Latitude.Replace('.', ','))),
                Stopover = true
            }).ToList();

        if (waypoints.Count < 2)
        {
            return;
        }


        var origin = waypoints.FirstOrDefault().Location;
        var destination = waypoints.LastOrDefault().Location;


        waypoints.Remove(waypoints.FirstOrDefault());
        waypoints.Remove(waypoints.LastOrDefault());

        var dr = new DirectionsRequest
        {
            Origin = origin,
            Destination = destination,
            Waypoints = waypoints,
            TravelMode = TravelMode.Driving,
            DrivingOptions = new DrivingOptions()
        };
        try
        {
            _directionsResult = await dirRend.Route(dr, new DirectionsRequestOptions()
            {
                StripLegsStepsLatLngs = false,
                StripOverviewPath = false,
                StripOverviewPolyline = false,
                StripLegsStepsPath = false,
                StripLegsSteps = false
            });

            if (_directionsResult == null)
            {
                return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error parsing DirectionsResult Object. Message: " + e.Message);
        }
        var routes = _directionsResult.Routes.SelectMany(x => x.Legs).ToList();

        float? totalDuration = 0F;
        float? totalDistance = 0F;

        foreach (var route in routes)
        {

            totalDuration += route.Duration?.Value;
            totalDistance += route.Distance?.Value;

            _durationTotalString = TimeSpan.FromSeconds((double)totalDuration).Humanize(4);
            _distanceTotalString = $"{(totalDistance / 1000000)} km";
        }

    }

    private async Task RemoveRoute()
    {
        await dirRend.SetDirections(null);
        await dirRend.SetMap(null);
    }

    private async Task OnAfterInitAsync()
    {
        if (markers.Any())
        {
            var lastMarker = markers.Pop();
            await lastMarker.SetMap(null);
        }

        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });

        if (trip != null)
        {
            await mapCurrentTrip();
        }
        else if (visit != null)
        {
            await AddMarker();
        }

    }

    private void ShowTripSteps()
    {
        TravelStepsShown = !TravelStepsShown;
    }

    public void map()
    {

    }

    private Visit retrieveVisitByLatLngLiteral(LatLngLiteral latlng)
    {
        int precision = 1000;

        var visit = trip.Visits.FirstOrDefault(v =>
            compareDoubles(double.Parse(v.Location.Latitude, System.Globalization.CultureInfo.InvariantCulture), latlng.Lat, precision)
            && compareDoubles(double.Parse(v.Location.Longtitude, System.Globalization.CultureInfo.InvariantCulture), latlng.Lng, precision));

        if (visit == null)
        {
            precision /= 10;
            visit = trip.Visits.FirstOrDefault(v =>
                compareDoubles(double.Parse(v.Location.Latitude, System.Globalization.CultureInfo.InvariantCulture), latlng.Lat, precision)
                && compareDoubles(double.Parse(v.Location.Longtitude, System.Globalization.CultureInfo.InvariantCulture), latlng.Lng, precision));
        }

        return visit;
    }

    private bool compareDoubles(double a, double b, int precision)
    {
        return Math.Floor(a * precision) == Math.Floor(b * precision);
    }
}
