@using TravelManagerFE.Data
@using TravelManagerFE.Pages
@using Plk.Blazor.DragDrop
@using TravelManagerFE.Data.Models

@page "/tripDetails/{id}"

<h3>Trip Details</h3>

@inject NavigationManager NavigationManager
@inject TripService TripService


<div>
    <b>@trip.Title</b>
    <b>@trip.Type</b>
</div>
<br />
<br />
<EditForm Model="@destinationRequest">
    <div class="body-limiter">
        <div class="wrap-login">
            <label class="login-input">
                Arrival:
                <InputDate class="login-input-field" id="arrival" @bind-Value="destinationRequest.Arrival" />
            </label>
            

            <label class="login-input">
                Departure:
                <InputDate class="login-input-field" id="departure" @bind-Value="destinationRequest.Departure" />
            </label>
            <label>
                Price per person:
                <InputNumber class="login-input-field" id="price" @bind-Value="destinationRequest.PricePerPerson" />
            </label>
        </div>
    </div>
</EditForm>

<button @onclick="DisplayDestinationSearch">Search for destinations</button>

<Dropzone Items="trip.Visits">
    <div>@context.Location.Title</div>
</Dropzone>
<div>
    <button @onclick="SaveDestinationOrder">Save destination order</button>
</div>
<br />
<br />
<button @onclick="DisplayMapRoutes">Show On Map</button>

@if (DestinationSearchShown)
{
    <DestinationSearch OnClick="ClickHandler"></DestinationSearch>
}

@if (MapRoutesShown)
{
<MapRoutes Trip = "@trip"/>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Trip trip = new Trip();
    private bool DestinationSearchShown { get; set; }
    private bool MapRoutesShown { get; set; }
    private DestinationAddRequest destinationRequest { get; set; } = new DestinationAddRequest();

    private class DestinationAddRequest
    {
        public string Id { get; set; }
        public DateTime Arrival { get; set; }
        public DateTime Departure { get; set; }
        public float PricePerPerson { get; set; }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        DestinationSearchShown = false;
        trip = TripService.GetTrip(Id);
        trip.Visits = trip.Visits.OrderBy(destination => destination.VisitationIndex).ToList();
    }

    void ClickHandler(Location location)
    {
        var locationResult = TripService.AddLocation(trip.Id, location);

        var visit = new VisitRequest
        {
            Arrival = destinationRequest.Arrival,
            Departure = destinationRequest.Departure,
            LocationId = locationResult.Id,
            TripId = trip.Id
        };

        trip = TripService.AddDestinationToTrip(visit);
    }

    private void DisplayDestinationSearch() => DestinationSearchShown = !DestinationSearchShown;
    private void DisplayMapRoutes() => MapRoutesShown = !MapRoutesShown;

    private void SaveDestinationOrder()
    {
        foreach (var tripDestination in trip.Visits)
        {
            tripDestination.VisitationIndex = trip.Visits.IndexOf(tripDestination).ToString();
        }

        TripService.ReorderTripDestinations(trip);
    }


}
