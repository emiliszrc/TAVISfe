@using TravelManagerFE.Data
@using TravelManagerFE.Pages
@using Plk.Blazor.DragDrop
@using TravelManagerFE.Data.Models

@page "/tripDetails/{id}"

<h3>Trip Details</h3>

@inject NavigationManager NavigationManager
@inject TripService TripService


<div>
    <b>@trip.Title</b>
    <b>@trip.Type</b>
</div>
<br />
<br />

@*<EditForm Model="@destinationRequest">
        <div class="body-limiter">
            <div class="wrap-login">
                <label class="login-input">
                    Arrival:
                    <InputDate class="login-input-field" id="arrival" @bind-Value="destinationRequest.Arrival" />
                </label>


                <label class="login-input">
                    Departure:
                    <InputDate class="login-input-field" id="departure" @bind-Value="destinationRequest.Departure" />
                </label>
                <label>
                    Price per person:
                    <InputNumber class="login-input-field" id="price" @bind-Value="destinationRequest.PricePerPerson" />
                </label>
            </div>
        </div>
    </EditForm>*@
<Dropzone Items="trip.Visits" Class="plk-dd-dropzone-visits">
    <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <span>@context.Location.Title</span>
            </div>
            <div class="mat-layout-grid-cell"></div>
            <div class="mat-layout-grid-cell">
                <MatButton @onclick="@(() => OpenVisitEdit(@context))" class="btn btn-secondary m-1">
                    Edit
                    <span class="material-icons">
                        edit
                    </span>
                </MatButton>
            </div>
        </div>
    </div>
    <MatDivider></MatDivider>
</Dropzone>
<div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatButton @onclick="SaveDestinationOrder">Save destination order</MatButton>
        </div>
        <div class="mat-layout-grid-cell">
            <MatButton @onclick="DisplayMapRoutes">Show On Map</MatButton>
        </div>
    </div>
</div>

<MatButton @onclick="DisplayDestinationSearch">Add new visit</MatButton>

@if (DestinationSearchShown)
{
    <DestinationSearch OnClick="ClickHandler"></DestinationSearch>
}

@if (MapRoutesShown)
{
    <MapRoutes Trip="@trip" />
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Trip trip = new Trip();
    private bool DestinationSearchShown { get; set; }
    private bool MapRoutesShown { get; set; }
    private DestinationAddRequest destinationRequest { get; set; } = new DestinationAddRequest();

    private class DestinationAddRequest
    {
        public string Id { get; set; }
        public DateTime Arrival { get; set; }
        public DateTime Departure { get; set; }
        public float PricePerPerson { get; set; }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        DestinationSearchShown = false;
        trip = TripService.GetTrip(Id);
        trip.Visits = trip.Visits.OrderBy(destination => destination.VisitationIndex).ToList();
    }

    void ClickHandler(Location location)
    {
        var locationResult = TripService.AddLocation(trip.Id, location);

        var visit = new VisitRequest
        {
            Arrival = destinationRequest.Arrival,
            Departure = destinationRequest.Departure,
            LocationId = locationResult.Id,
            TripId = trip.Id
        };

        trip = TripService.AddDestinationToTrip(visit);
    }

    //private void DisplayDestinationSearch() => DestinationSearchShown = !DestinationSearchShown;
    private void DisplayDestinationSearch()
    {
        NavigationManager.NavigateTo($"tripDetails/{trip.Id}/addVisit");
    }
    private void DisplayMapRoutes() => MapRoutesShown = !MapRoutesShown;

    private void SaveDestinationOrder()
    {
        foreach (var tripDestination in trip.Visits)
        {
            tripDestination.VisitationIndex = trip.Visits.IndexOf(tripDestination).ToString();
        }

        TripService.ReorderTripDestinations(trip);
    }


    private void OpenVisitEdit(Visit context)
    {
        throw new NotImplementedException();
    }

}
