<h3>Review</h3>
<div class="mat-layout-grid">
<div class="mat-layout-grid-inner">
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
        <h4>@Trip.Visits.Count() destination(s)</h4>
        <MatAccordion>
            <MatList style="height: 300px; overflow: scroll; overflow-x: hidden;" TwoLine="true">
                @foreach (var visit in Trip.Visits)
                {
                    <MatListItem OnClick="@(e => PopulateReview(e, visit))">
                        <MatListItemText>
                            <MatListItemPrimaryText>
                                @visit.Location.Title
                            </MatListItemPrimaryText>
                            <MatListItemSecondaryText>
                                @GetTripDestinationComments(visit.Id).Count comment(s)
                            </MatListItemSecondaryText>
                        </MatListItemText>
                    </MatListItem>
                    <MatDivider></MatDivider>
                }
            </MatList>
        </MatAccordion>
    </div>
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
    @if (ReviewingVisit != null)
    {
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-7">

                <EditForm Model="ReviewingVisit.Location">
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Location.Title" TextArea="true" Style="width: 130px; pointer-events: none;" HelperText="Helper Text" Label="Title"></MatTextField>
                    </p>
                    <p>
                        <MatSelect HelperText="Helper Text Persistent" Label="Pick the type of the trip" Style="pointer-events: none;"@bind-Value="@ReviewingVisit.Location.Type">
                            <MatOptionString></MatOptionString>
                            <MatOptionString Value="geos">Geographical object</MatOptionString>
                            <MatOptionString Value="lodging">Lodging</MatOptionString>
                            <MatOptionString Value="things_to_do">Things to do</MatOptionString>
                        </MatSelect>
                    </p>
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Location.Address" TextArea="true" HelperText="Helper Text" Label="Address" Style="height: 130px;pointer-events: none;"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Location.Latitude" Style="pointer-events: none;" HelperText="Helper Text" Label="Latitude"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Location.Longtitude" Style="pointer-events: none;" HelperText="Helper Text" Label="Longtitude"></MatTextField>
                    </p>
                </EditForm>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">

                <EditForm Model="ReviewingVisit">
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Arrival" Style="pointer-events: none;" HelperText="Helper Text" Label="Arrival"></MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="ReviewingVisit.Departure" Style="pointer-events: none;" HelperText="Helper Text" Label="Departure"></MatTextField>
                    </p>
                </EditForm>
            </div>
        </div>
    }
    </div>
</div>
</div>
@*<MatAccordion>
    <MatList style="height: 300px; overflow: scroll; overflow-x: hidden;" TwoLine="true">
        @foreach (var visit in Trip.Visits)
        {
            <MatListItem OnClick="@(e => PopulateReview(e, visit))">
                <MatListItemText>
                    <MatListItemPrimaryText>
                        @visit.Location.Title
                    </MatListItemPrimaryText>
                    <MatListItemSecondaryText>
                        @GetTripDestinationComments(visit.Id).Count comment(s)
                    </MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatDivider></MatDivider>
        }
    </MatList>
    @foreach (var visit in Trip.Visits)
    {
        <MatExpansionPanel Style="">
            @*<MatExpansionPanelSummary>
                <MatExpansionPanelHeader>
                    @visit.Location.Title
                </MatExpansionPanelHeader>
                @if (CurrentReview != null && Trip.Reviews.Any(r => r.Comments.Any(c => c.Visit.Id == visit.Id)))
                {
                    <MatExpansionPanelSubHeader>
                        @GetTripDestinationComments(visit.Id).Count comments
                    </MatExpansionPanelSubHeader>
                }
            </MatExpansionPanelSummary>
<MatExpansionPanelDetails>
    @if (CurrentReview != null)
    {
        <MatList SingleSelection="true" Style="height: auto; min-height: 200px;">
            @foreach (var comment in GetTripDestinationComments(visit.Id))
            {
                <MatListItem Style="height: auto; padding: 1rem;">
                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                @comment.Text
                            </MatBody2>
                            <div class="demo-mat-card-content">
                                <MatSubtitle2 class="demo-mat-card-clean-margin">
                                    @comment.Creator.Name @comment.Creator.Surname at @comment.CreatedDate
                                </MatSubtitle2>
                            </div>
                        </MatCardContent>
                    </MatCard>
                </MatListItem>
            }
        </MatList>
    }
    <p>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"><MatButton @onclick="@(() => PostComment(visit))"> Post comment </MatButton></div>
    </p>
</MatExpansionPanelDetails>
        </MatExpansionPanel>
    }
</MatAccordion>*@

@page "/review/{id}"
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using TravelManagerFE.Data.Models
@using System.Threading

@inject TripService TripService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public string Id { get; set; }
    public Trip Trip { get; set; }
    public User CurrentUser { get; set; }
    public Data.Models.Review CurrentReview { get; set; }
    IList<Comment> ExpandedNodes = new List<Comment>();
    Comment selectedNode;
    public Visit ReviewingVisit { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Trip = TripService.GetTrip(Id);

        var user = await SessionStorage.GetItemAsync<string>("user");
        CurrentUser = JsonConvert.DeserializeObject<User>(user);

        var reviewRequest = new ReviewRequest
        {
            ApprovalStatus = "not approved",
            Text = "",
            TripId = Id,
            UserId = CurrentUser.Id
        };

        var reviews = TripService.GetReviewBy(Id);

        Trip.Reviews = reviews;

        var currentUserReview = reviews.FirstOrDefault(r => r.User.Id == CurrentUser.Id);

        CurrentReview = currentUserReview == null ? TripService.CreateReview(reviewRequest) : currentUserReview;
    }



    private async void PostComment(Visit visit)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(visit), visit);
        var formModal = Modal.Show<CreateComment>("Add comment", parameters);
        var result = await formModal.Result;
        if (result.Data == null)
        {
            return;
        }
        var comment = result.Data.ToString();
        var commentRequest = new CommentRequest
        {
            VisitId = visit.Id,
            ReviewId = CurrentReview.Id,
            Text = comment
        };

        CurrentReview = TripService.PostComment(CurrentReview.Id, Trip.Id, commentRequest);

        var reviews = TripService.GetReviewBy(Id);

        Trip.Reviews = reviews;

        this.StateHasChanged();
    }

    private List<Comment> GetTripDestinationComments(string visitId)
    {
        var commentList = new List<Comment>();

        if (Trip.Reviews == null)
        {
            return commentList;
        }

        foreach (var review in Trip.Reviews)
        {
            foreach (var comment in review.Comments.Where(comment => comment.Visit.Id == visitId))
            {
                comment.Creator = review.User;
                commentList.Add(comment);
            }
        }

        return commentList;
    }

    private void PopulateReview(MouseEventArgs mouseEventArgs, Visit visit)
    {
        ReviewingVisit = visit;
    }

}
