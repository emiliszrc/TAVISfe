<h3>Review</h3>
<MatButton OnClick="ShowOnMap">Show on map</MatButton>
<div>
    @if (showOnMap)
    {
        @if (ReviewingVisit != null)
        {
            <MapRoutes Visit="@ReviewingVisit" />
        }
    }
</div>
<div>
    <span>
        <MatIconButton Id="approveButton" Style="@acceptButtonStyle" Icon="done" OnClick="@(e => PostStatus(e, ReviewStatus.Approved))" ToggleIcon="done_outlined" Toggled="@IsButtonToggled(ReviewStatus.Approved)"></MatIconButton>
        <MatIconButton Id="updateButton" Style="@updateButtonStyle" Icon="replay" OnClick="@(e => PostStatus(e, ReviewStatus.NeedsWork))" ToggleIcon="replay_circle_filled" Toggled="@IsButtonToggled(ReviewStatus.NeedsWork)"></MatIconButton>
        <MatIconButton Id="rejectButton" Style="@rejectButtonStyle" Icon="delete_outline" OnClick="@(e => PostStatus(e, ReviewStatus.Rejected))" ToggleIcon="delete" Toggled="@IsButtonToggled(ReviewStatus.Rejected)"></MatIconButton>
    </span>

    @*@if (CurrentReview != null)
        {
            <MatButton Label="Reviewers" OnClick="@OnClick2" @ref="Button2" ></MatButton>
            <MatMenu @ref="ReviewersList" >
                <MatList>
                    @foreach (var approval in CurrentReview.Approvals.Distinct())
                    {

                    }
                    <MatListItem>Item 1</MatListItem>
                </MatList>
            </MatMenu>
        }*@
</div>
<p>General trip warnings</p>
@if (CurrentReview != null && CurrentReview.Warnings.Any())
{
    <MatTable ShowPaging="CurrentReview.Warnings.Count(w => w.Visit == null) > 5" Items="CurrentReview.Warnings.Where(w=>w.Visit == null)">
        <MatTableRow Context="ctx">
            <td>@ctx.WarningText</td>
        </MatTableRow>
    </MatTable>
}

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
            <div>
                @if (Trip != null)
                {
                    <h4>@Trip.Visits.Count destination(s)</h4>
                    <MatAccordion>
                        <MatList style="height: 300px; overflow: scroll; overflow-x: hidden;" TwoLine="true">
                            @foreach (var visit in Trip.Visits)
                            {
                                <MatListItem OnClick="@(e => PopulateReview(e, visit))">
                                    <MatListItemText>
                                        <MatListItemPrimaryText>
                                            @visit.Location.Title
                                        </MatListItemPrimaryText>
                                        <MatListItemSecondaryText>
                                            @GetTripDestinationComments(visit.Id).Count comment(s)
                                        </MatListItemSecondaryText>
                                    </MatListItemText>
                                </MatListItem>
                                <MatDivider></MatDivider>
                            }
                        </MatList>
                    </MatAccordion>
                }
            </div>
        </div>
    </div>
</div>
<div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
    @if (ReviewingVisit != null)
    {

        <MatTabGroup>
            <MatTab Label="Fields">
                <div class="mat-layout-grid-inner mat-layout-grid-cell-span-13" style="padding: 20px 10px;">
                    <div class="mat-layout-grid-cell">
                        <EditForm Model="ReviewingVisit.Location">
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Location.Title" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Title" FullWidth="true"> </MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Location.Type" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Title" FullWidth="true"> </MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Location.Address" IconTrailing="true" ReadOnly="true" HelperText="" Label="Address" Style="" FullWidth="true"></MatTextField>
                            </p>
                            <p>
                                <MatButton></MatButton>
                            </p>
                        </EditForm>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">

                        <EditForm Model="ReviewingVisit">
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Arrival" Style="" IconTrailing="true" ReadOnly="true" HelperText="Helper Text" Label="Arrival" FullWidth="true"></MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Departure" Style="" IconTrailing="true" ReadOnly="true" HelperText="Helper Text" Label="Departure" FullWidth="true"></MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Location.Latitude" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Latitude" FullWidth="true"></MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="ReviewingVisit.Location.Longtitude" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Longtitude" FullWidth="true"></MatTextField>
                            </p>
                        </EditForm>
                    </div>
                </div>


            </MatTab>
            <MatTab Label="Warnings">
                @if (CurrentReview != null && CurrentReview.Warnings.Any(w => w.Visit != null && w.Visit.Id == ReviewingVisit.Id))
                {
                    <MatTable ShowPaging="CurrentReview.Warnings.Count(w => w.Visit != null && w.Visit.Id == ReviewingVisit.Id) > 5"Items="CurrentReview.Warnings.Where(w=>w.Visit != null && w.Visit.Id == ReviewingVisit.Id)">
                        <MatTableRow Context="ctx">
                            <td>@ctx.WarningText</td>
                        </MatTableRow>
                    </MatTable>
                }
                else
                {
                    <p>No warnings occured during submission</p>
                }
            </MatTab>
        </MatTabGroup>
    }
</div>

<MatButton OnClick="PostComment">Post comment</MatButton>
<MatButton OnClick="ShowDiscussion">Discussion</MatButton>


@if (ReviewingVisit != null)
{
    <MatButton OnClick="PostCommentOnCurrentVisit">Post comment on current visit</MatButton>

}
@if (showDiscussion)
{
    <ul level="0">
        @foreach (var comment in CurrentReview.Comments)
        {
            <CommentItem CommentNode=@comment Level=1 @key=comment CurrentReview="CurrentReview" />
        }
    </ul>
}

@page "/review/{id}"
@using Blazored.SessionStorage
@using TravelManagerFE.Data.Models
@using Newtonsoft.Json

@inject TripService TripService
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@code {
    [Parameter]
    public string Id { get; set; }
    public Trip Trip { get; set; }
    public User CurrentUser { get; set; }
    public Review CurrentReview { get; set; }
    IList<Comment> ExpandedNodes = new List<Comment>();
    Comment selectedNode;
    public Visit ReviewingVisit { get; set; }
    bool showOnMap { get; set; }
    bool showDiscussion { get; set; }

    private string acceptButtonStyle { get; set; }
    private string updateButtonStyle { get; set; }
    private string rejectButtonStyle { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Trip = TripService.GetTrip(Id);

        var user = await SessionStorage.GetItemAsync<string>("user");
        CurrentUser = JsonConvert.DeserializeObject<User>(user);

        var review = TripService.GetReviewBy(Id);

        Trip = TripService.GetTrip(review.Trip.Id);

        Trip.Reviews.Add(review);

        CurrentReview = review;
    }

    public async void PostStatus(MouseEventArgs e, ReviewStatus reviewStatus)
    {
        var statusRequest = new ReviewStatusRequest
        {
            ReviewId = CurrentReview.Id,
            CreatorId = CurrentUser.Id,
            ReviewStatus = reviewStatus.ToString()
        };

        CurrentReview = TripService.AddReviewStatus(statusRequest);

        StateHasChanged();
    }

    public async void PostComment()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReviewingVisit), ReviewingVisit);
        var formModal = Modal.Show<CreateComment>("Add comment", parameters);
        var result = await formModal.Result;

        var currentlyLoggedIn = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCurrentUser();

        if (result.Data == null)
        {
            return;
        }
        var comment = result.Data.ToString();
        var commentRequest = new CommentRequest
        {
            ReviewId = CurrentReview.Id,
            Text = comment,
            CreatorId = currentlyLoggedIn.Id
        };

        CurrentReview = TripService.PostComment(CurrentReview.Id, commentRequest);

        var review = TripService.GetReviewBy(Id);

        Trip.Reviews.Add(review);

        StateHasChanged();
    }

    public async void PostCommentOnCurrentVisit()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReviewingVisit), ReviewingVisit);
        var formModal = Modal.Show<CreateComment>("Add comment on visit", parameters);
        var result = await formModal.Result;

        var currentlyLoggedIn = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCurrentUser();

        if (result.Data == null)
        {
            return;
        }
        var comment = result.Data.ToString();
        var commentRequest = new CommentRequest
        {
            VisitId = ReviewingVisit.Id,
            ReviewId = CurrentReview.Id,
            Text = comment,
            CreatorId = currentlyLoggedIn.Id
        };

        CurrentReview = TripService.PostComment(CurrentReview.Id, commentRequest);

        var review = TripService.GetReviewBy(Id);

        Trip.Reviews.Add(review);

        StateHasChanged();
    }

    private List<Comment> GetTripDestinationComments(string visitId)
    {
        var commentList = new List<Comment>();

        if (Trip.Reviews == null)
        {
            return commentList;
        }

        foreach (var review in Trip.Reviews)
        {
            foreach (var comment in review.Comments.Where(comment => comment.Visit != null && comment.Visit.Id == visitId))
            {
                comment.Creator = review.User;
                commentList.Add(comment);
            }
        }

        return commentList;
    }

    private void PopulateReview(MouseEventArgs mouseEventArgs, Visit visit)
    {
        ReviewingVisit = new Visit();
        showOnMap = false;
        showDiscussion = false;
        StateHasChanged();
        ReviewingVisit = visit;
        ReviewingVisit.Location.Type = TranslateType(visit.Location.Type);
    }

    private void ShowOnMap()
    {
        showOnMap = !showOnMap;
    }

    private void ShowDiscussion()
    {
        showDiscussion = !showDiscussion;
    }

    public enum ElementTypes
    {
        Title,
        Type,
        Address,
        Arrival,
        Departure,
        Latitude,
        Longtitude
    }

    private static string TranslateType(string locationType)
    {
        switch (locationType)
        {
            case "geos":
            case "Geographical object":
                return "Geographical object";
            case "lodging":
            case "Lodging":
                return "Lodging";
            case "things_to_do":
            case "Things to do":
                return "Things to do";
            default:
                return "Not defined";
        }
    }

    private bool IsButtonToggled(ReviewStatus approved)
    {
        if (CurrentReview == null || CurrentReview.Approvals == null || !CurrentReview.Approvals.Any())
        {
            return false;
        }

        var approval = CurrentReview.Approvals.OrderByDescending(a => a.CreatedDate).FirstOrDefault(a => a.User.Id == CurrentUser.Id);

        if (approval == null)
        {
            return false;
        }

        switch (approval.Status)
        {
            case ReviewStatus.Approved:
                if (approved == ReviewStatus.Approved)
                {
                    return true;
                }
                break;
            case ReviewStatus.NeedsWork:
                if (approved == ReviewStatus.NeedsWork)
                {
                    //TODO style fixup on status change
                    return true;
                }
                break;
            case ReviewStatus.Rejected:
                if (approved == ReviewStatus.Rejected)
                {
                    return true;
                }
                break;
            default:
                return false;
        }

        return false;
    }

    private void SetApproveButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private void SetNeedsWorkButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private void SetRejectButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private int CountTripVisits()
    {
        return CurrentReview.Comments.Sum(CalculateChildComments);
    }

    private int CalculateChildComments(Comment parent)
    {
        return parent.ChildComments.Sum(comment => CalculateChildComments(comment));
    }

}
