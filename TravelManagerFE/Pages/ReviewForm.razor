<div>
    <h3 style="float:left">Review</h3>
    @if (Trip != null && CurrentUser != null)
    {
        @if (Trip.Creator.Id != CurrentUser.Id)
        {
            <span style="float: right">
                <MatIconButton Id="approveButton" Style="@acceptButtonStyle" Icon="done" OnClick="@(e => PostStatus(e, ReviewStatus.Approved))" ToggleIcon="done_outlined" Toggled="@IsButtonToggled(ReviewStatus.Approved)"></MatIconButton>
                <MatIconButton Id="updateButton" Style="@updateButtonStyle" Icon="replay" OnClick="@(e => PostStatus(e, ReviewStatus.NeedsWork))" ToggleIcon="replay_circle_filled" Toggled="@IsButtonToggled(ReviewStatus.NeedsWork)"></MatIconButton>
            </span>
        }
        else
        {
            @if (Trip.TripStatus == TripStatus.ReadyToFinalize)
            {
                <MatButton style="float: right" OnClick="FinalizeAsCreator">Finalize</MatButton>
            }
            else
            {
                <p style="float: right">Missing approvals, not ready to finalize</p>
            }
        }
    }
</div>
<br />
<br />
<MatTabGroup>
    <MatTab Label="Schedule">
        @if (appointments != null && appointments.Any())
        {
            <div class="row">
                <div class="col-xl-6">
                    <RadzenScheduler style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                                     TextProperty="Text" SelectedIndex="2"
                                     AppointmentRender=@OnAppointmentRender Date="Trip.Visits.FirstOrDefault().Arrival">
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                    </RadzenScheduler>
                </div>
            </div>
        }
    </MatTab>
    <MatTab Label="Trip details">
        <br />
        <p>Created by @Trip.Creator.Name @Trip.Creator.Surname</p>
        @if (CurrentReview != null && CurrentReview.Warnings.Any())
        {
            <MatAccordion>
                <MatList style="max-height: 300px; overflow: auto; overflow-x: hidden;">
                    @foreach (var warning in CurrentReview.Warnings)
                    {
                        <p>@warning.WarningText</p>
                        <MatDivider></MatDivider>
                    }
                </MatList>
            </MatAccordion>
            <br />
        }
        <br />
        <MatButton OnClick="ShowOnMap">Show on map</MatButton>
        <div>
            @if (showOnMap)
            {
                <MapRoutes Trip="@Trip" />
            }
        </div>
    </MatTab>
    <MatTab Label="Visits">
        <br />
        @if (ReviewingVisit != null)
        {
            <MatButton OnClick="PostCommentOnCurrentVisit">Post comment on current visit</MatButton>
        }
        <br />
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <div>
                        @if (Trip != null)
                        {
                            <h4>@Trip.Visits.Count visit(s)</h4>
                            <MatAccordion>
                                <MatList style="height: 300px; overflow: auto; overflow-x: hidden;" TwoLine="true">
                                    @foreach (var visit in Trip.Visits)
                                    {
                                        <MatListItem OnClick="@(e => PopulateReview(e, visit))">
                                            <MatListItemText>
                                                <MatListItemPrimaryText>
                                                    @visit.Location.Title
                                                </MatListItemPrimaryText>
                                                <MatListItemSecondaryText>
                                                    @GetTripDestinationComments(visit.Id).Count comment(s)
                                                </MatListItemSecondaryText>
                                            </MatListItemText>
                                        </MatListItem>
                                        <MatDivider></MatDivider>
                                    }
                                </MatList>
                            </MatAccordion>
                        }
                    </div>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
                    <div>
                        @if (ReviewingVisit != null)
                        {
                            <MapRoutes Visit="@ReviewingVisit" />
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
            @if (ReviewingVisit != null)
            {

                <MatTabGroup>
                    <MatTab Label="Fields">
                        <div class="mat-layout-grid-inner mat-layout-grid-cell-span-13" style="padding: 20px 10px;">
                            <div class="mat-layout-grid-cell">
                                <EditForm Model="ReviewingVisit.Location">
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Location.Title" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Title" FullWidth="true"> </MatTextField>
                                    </p>
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Location.Type" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Title" FullWidth="true"> </MatTextField>
                                    </p>
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Location.Address" IconTrailing="true" ReadOnly="true" HelperText="" Label="Address" Style="" FullWidth="true"></MatTextField>
                                    </p>
                                    <p>
                                        <MatButton></MatButton>
                                    </p>
                                </EditForm>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">

                                <EditForm Model="ReviewingVisit">
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Arrival" Style="" IconTrailing="true" ReadOnly="true" HelperText="Helper Text" Label="Arrival" FullWidth="true"></MatTextField>
                                    </p>
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Departure" Style="" IconTrailing="true" ReadOnly="true" HelperText="Helper Text" Label="Departure" FullWidth="true"></MatTextField>
                                    </p>
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Location.Latitude" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Latitude" FullWidth="true"></MatTextField>
                                    </p>
                                    <p>
                                        <MatTextField @bind-Value="ReviewingVisit.Location.Longtitude" IconTrailing="true" Style="" ReadOnly="true" HelperText="Helper Text" Label="Longtitude" FullWidth="true"></MatTextField>
                                    </p>
                                </EditForm>
                            </div>
                        </div>


                    </MatTab>
                    <MatTab Label="Warnings">
                        @if (CurrentReview != null && CurrentReview.Warnings.Any(w => w.Visit != null && w.Visit.Id == ReviewingVisit.Id))
                        {
                            <MatTable ShowPaging="CurrentReview.Warnings.Count(w => w.Visit != null && w.Visit.Id == ReviewingVisit.Id) > 5" Items="CurrentReview.Warnings.Where(w => w.Visit != null && w.Visit.Id == ReviewingVisit.Id)">
                                <MatTableRow Context="ctx">
                                    <td>@ctx.WarningText</td>
                                </MatTableRow>
                            </MatTable>
                        }
                        else
                        {
                            <p>No warnings occured during submission</p>
                        }
                    </MatTab>
                </MatTabGroup>
            }
        </div>
    </MatTab>
    <MatTab Label="Discussion">
        <br />
        <ul level="0">
            @foreach (var comment in CurrentReview.Comments)
            {
                <CommentItem CommentNode=@comment Level=1 @key=comment CurrentReview="CurrentReview" />
            }
        </ul>
    </MatTab>
    <MatTab Label="Reviewers">
        <br />
        <div>
            @foreach (var reviewer in CurrentReview.Reviewers)
            {
                <p>
                    @reviewer.User.Name @reviewer.User.Surname
                    @if (reviewer.User.Id == CurrentUser.Id)
                    {
                        <b>(you)</b>
                    }
                </p>

                @if (CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.Status == ApprovalStatus.Approved)
                {
                    <p style="font-size: 80%">Approved at @CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.CreatedDate</p>
                }
                @if (CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.Status == ApprovalStatus.NeedsWork)
                {
                    <p style="font-size: 80%">NeedsWork @CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.CreatedDate</p>
                }
                @if (CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.Status == ApprovalStatus.Rejecting)
                {
                    <p style="font-size: 80%">Rejected @CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.CreatedDate</p>
                }
                @if (!CurrentReview.Approvals.Any(a => a.User.Id == reviewer.User.Id))
                {
                    <p style="font-size: 80%">No actions yet @CurrentReview.Approvals?.Where(a => a.User?.Id == reviewer.User?.Id)?.OrderByDescending(a => a?.CreatedDate)?.FirstOrDefault()?.CreatedDate</p>
                }
                <MatDivider></MatDivider>
            }
        </div>
    </MatTab>
</MatTabGroup>

<MatButton OnClick="PostComment">Post comment</MatButton>

@page "/review/{id}"
@using Blazored.SessionStorage
@using TravelManagerFE.Data.Models
@using Newtonsoft.Json
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering

@inject TripService TripService
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService DialogService
@inject IMatToaster Toaster

@code {

    [Parameter]
    public string Id { get; set; }

    public Trip Trip { get; set; }
    public User CurrentUser { get; set; }
    public Review CurrentReview { get; set; }
    IList<Comment> ExpandedNodes = new List<Comment>();
    Comment selectedNode;
    public Visit ReviewingVisit { get; set; }
    bool showOnMap { get; set; }
    bool showDiscussion { get; set; }

    private string acceptButtonStyle { get; set; }
    private string updateButtonStyle { get; set; }
    private string rejectButtonStyle { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }


    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>();

    public class Appointment
    {
        public DateTime Start { get; set; } = DateTime.Now;
        public DateTime End { get; set; } = DateTime.Now;
        public string Text { get; set; } = string.Empty;
    }


    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Trip = TripService.GetTrip(Id);

        var user = await SessionStorage.GetItemAsync<string>("user");
        CurrentUser = JsonConvert.DeserializeObject<User>(user);

        var review = TripService.GetReviewBy(Id);

        Trip = TripService.GetTrip(review.Trip.Id);

        Trip.Reviews.Add(review);

        CurrentReview = review;
        Trip.Visits.ForEach(v => appointments.Add(new Appointment
        {
            Start = v.Arrival,
            End = v.Departure,
            Text = v.Location.Title
        }));
    }

    public async void PostStatus(MouseEventArgs e, ReviewStatus reviewStatus)
    {
        var statusRequest = new ReviewStatusRequest
        {
            ReviewId = CurrentReview.Id,
            CreatorId = CurrentUser.Id,
            ReviewStatus = reviewStatus.ToString()
        };

        CurrentReview = TripService.AddReviewStatus(statusRequest);

        ShowToast("Succesfully posted status change", MatToastType.Info, "Success", false);
        StateHasChanged();
    }

    public async void PostComment()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReviewingVisit), ReviewingVisit);
        var formModal = Modal.Show<CreateComment>("Add comment", parameters);
        var result = await formModal.Result;

        var currentlyLoggedIn = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCurrentUser();

        if (result.Data == null)
        {
            return;
        }
        var comment = result.Data.ToString();
        var commentRequest = new CommentRequest
        {
            ReviewId = CurrentReview.Id,
            Text = comment,
            CreatorId = currentlyLoggedIn.Id
        };

        CurrentReview = TripService.PostComment(CurrentReview.Id, commentRequest);

        var review = TripService.GetReviewBy(Id);

        Trip.Reviews.Add(review);

        StateHasChanged();
    }

    public async void PostCommentOnCurrentVisit()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReviewingVisit), ReviewingVisit);
        var formModal = Modal.Show<CreateComment>("Add comment on visit", parameters);
        var result = await formModal.Result;

        var currentlyLoggedIn = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCurrentUser();

        if (result.Data == null)
        {
            return;
        }
        var comment = result.Data.ToString();
        var commentRequest = new CommentRequest
        {
            VisitId = ReviewingVisit.Id,
            ReviewId = CurrentReview.Id,
            Text = comment,
            CreatorId = currentlyLoggedIn.Id
        };

        CurrentReview = TripService.PostComment(CurrentReview.Id, commentRequest);

        var review = TripService.GetReviewBy(Id);

        Trip.Reviews.Add(review);

        StateHasChanged();
    }

    private List<Comment> GetTripDestinationComments(string visitId)
    {
        var commentList = new List<Comment>();

        if (Trip.Reviews == null)
        {
            return commentList;
        }

        foreach (var review in Trip.Reviews)
        {
            foreach (var comment in review.Comments.Where(comment => comment.Visit != null && comment.Visit.Id == visitId))
            {
                comment.Creator = review.User;
                commentList.Add(comment);
            }
        }

        return commentList;
    }

    private void PopulateReview(MouseEventArgs mouseEventArgs, Visit visit)
    {
        ReviewingVisit = new Visit();
        showOnMap = false;
        showDiscussion = false;
        StateHasChanged();
        ReviewingVisit = visit;
        ReviewingVisit.Location.Type = TranslateType(visit.Location.Type);
    }

    private void ShowOnMap()
    {
        showOnMap = !showOnMap;
    }

    private void ShowDiscussion()
    {
        showDiscussion = !showDiscussion;
    }

    public enum ElementTypes
    {
        Title,
        Type,
        Address,
        Arrival,
        Departure,
        Latitude,
        Longtitude
    }

    private static string TranslateType(string locationType)
    {
        switch (locationType)
        {
            case "geos":
            case "Geographical object":
                return "Geographical object";
            case "lodging":
            case "Lodging":
                return "Lodging";
            case "things_to_do":
            case "Things to do":
                return "Things to do";
            default:
                return "Not defined";
        }
    }

    private bool IsButtonToggled(ReviewStatus approved)
    {
        if (CurrentReview == null || CurrentReview.Approvals == null || !CurrentReview.Approvals.Any())
        {
            return false;
        }

        var approval = CurrentReview.Approvals.OrderByDescending(a => a.CreatedDate).FirstOrDefault(a => a.User.Id == CurrentUser.Id);

        if (approval == null)
        {
            return false;
        }

        switch (approval.Status)
        {
            case ApprovalStatus.Approved:
                if (approved == ReviewStatus.Approved)
                {
                    return true;
                }
                break;
            case ApprovalStatus.NeedsWork:
                if (approved == ReviewStatus.NeedsWork)
                {
                    //TODO style fixup on status change
                    return true;
                }
                break;
            case ApprovalStatus.Rejecting:
                if (approved == ReviewStatus.Rejected)
                {
                    return true;
                }
                break;
            default:
                return false;
        }

        return false;
    }

    private void SetApproveButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private void SetNeedsWorkButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private void SetRejectButtonStyle()
    {
        acceptButtonStyle = "background-color: coral;border-style: solid;border-width: thin;";
    }

    private int CountTripVisits()
    {
        return CurrentReview.Comments.Sum(CalculateChildComments);
    }

    private int CalculateChildComments(Comment parent)
    {
        return parent.ChildComments.Sum(comment => CalculateChildComments(comment));
    }

    private void FinalizeAsCreator()
    {
        TripService.FinalizeTrip(Trip.Id, CurrentUser.Id);
    }

    private void ShowToast(string text, MatToastType type, string title, bool requireInteraction)
    {
        Toaster.Add(text, type, title, null, config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;

            //config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(5000);
            config.RequireInteraction = requireInteraction;
            //config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            if (requireInteraction)
            {
                config.Onclick = toast => Task.CompletedTask;
            }
        });
    }

}
