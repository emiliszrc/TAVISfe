@using TravelManagerFE.Data
@using BlazorTable
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using TravelManagerFE.Data
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using TravelManagerFE.Data
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using TravelManagerFE.Data

@page "/destinationsearch"

<h3>Destination Search</h3>

@inject SearchService SearchService


<div>
    <div>
        <MatTextField placeholder="location" @bind-Value="query"/>
    </div>
    <MatButton @onclick="SearchForDestinations">Search</MatButton>
</div>
<div>

</div>
    @if (locations.Any())
    {
        @*<table>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Address</th>
            </tr>
            @foreach (var destination in locations)
            {
                <tr>
                    <td>@destination.Title</td>
                    <td>@destination.Type</td>
                    <td>@destination.Address</td>
                    <td>
                        <button @onclick="@(() => OnClick.InvokeAsync(destination))">Click me</button>
                    </td>
                </tr>
            }
        </table>*@
        <MatTable Items="@locations" PageSize="15" ShowPaging="true" UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="RowClick">
            <MatTableHeader>
                <th style="width:25%" >Type</th>
                <th style="width:25%">Address</th>
                <th style="width:25%">Title</th>
            </MatTableHeader>
            <MatTableRow >
                <td>@context.Type</td>
                <td>@context.Address</td>
                <td>@context.Title</td>
            </MatTableRow>
        </MatTable>
    }

@code {
    private List<Location> locations = new List<Location>();

    private string query = string.Empty;

    private bool tripViewEnabled { get; set; }

    [Parameter]
    public EventCallback<Location> OnClick { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        tripViewEnabled = false;
    }

    private async Task SearchForDestinations()
    {
        locations = await SearchService.SearchForDestinations(query);
    }

    private void DisplayTrips() => tripViewEnabled = !tripViewEnabled;

    private void RowClick(object obj)
    {
        OnClick.InvokeAsync((Location)obj);
    }

}
