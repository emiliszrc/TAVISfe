<h1>Profile</h1>
@page "/profile"
@using TravelManagerFE.Data.Models
@using System.Linq
@using Blazored.SessionStorage
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService userService
@inject OrganisationService organisationService
@inject IMatToaster Toaster
@inject ISessionStorageService SessionStorageService

<MatTabGroup>
    <MatTab Label="Settings">

    </MatTab>
    <MatTab Label="Organisation settings">
        @if (User != null)
        {
            @if (User.Contracts.Any() && User.Contracts.Any(c => c.ContractType == ContractType.Owner))
            {
                <h3>Pick an organisation to manage</h3>
                <MatSelectItem @bind-Value="@SelectedOrganisation" Items="@(User.Contracts.Where(c => c.ContractType == ContractType.Owner).Select(c => c.Organisation).ToList())">
                    <ItemTemplate>@context.Title</ItemTemplate>
                </MatSelectItem>

                <MatButton OnClick="OpenOrganisationMemberView">Manage</MatButton>

                @if (ManageOrganisationMembers)
                {
                    <p></p>
                    <h4>Members</h4>
                    <MatList>
                        @foreach (var member in CurrentOrganisation.Contracts.Select(c => c.User))
                        {
                            <MatListItem>@member.Name @member.Surname</MatListItem>
                        }
                    </MatList>

                    <h4>Add members to organisation</h4>
                    <MatTextField @bind-Value="Username" HelperText="Title" Label="Title"></MatTextField>
                    <MatButton @onclick="Invite">Invite</MatButton>

                    <h4>Set minimum reviewer count</h4>
                    <MatSelectItem @bind-Value="selectedCount" Items="@ReviewerCount"></MatSelectItem> <br />
                    <MatButton @onclick="SubmitReviewers">Submit</MatButton>
                    <p></p>
                }
            }

            <MatDivider></MatDivider> <br/>
            <MatDivider></MatDivider>
            <p></p>
            <h3>Create an organisation</h3>

            <EditForm Model="OrganisationRequest">
                <p>
                    <MatTextField @bind-Value="OrganisationRequest.Title" HelperText="Title" Label="Title"></MatTextField>
                </p>
            </EditForm>
            <MatButton @onclick="Submit">Submit</MatButton>

            <MatDivider></MatDivider><br />
            <MatDivider></MatDivider>
            <p></p>
            <h3>Review invites to organisations</h3>
            @if (Invites != null)
            {
                @foreach (var invite in Invites.Where(i => i.Status == InviteStatus.New))
                {
                    <tr>
                        <td>@invite.Organisation.Title</td>
                        <td><MatButton @onclick="@(() => AcceptInvite(invite))">Accept invite</MatButton></td>
                        <td><MatButton @onclick="@(() => RejectInvite(invite))">Reject invite</MatButton></td>
                    </tr>
                }
            }
        }
    </MatTab>
</MatTabGroup>

@code {
    public User User { get; set; }
    public Organisation SelectedOrganisation { get; set; }
    public Organisation CurrentOrganisation { get; set; }
    public OrganisationRequest OrganisationRequest { get; set; } = new OrganisationRequest();
    public bool ManageOrganisationMembers { get; set; }
    public List<Invite> Invites { get; set; } = new List<Invite>();
    public List<int> ReviewerCount { get; set; }
    public int selectedCount { get; set; }
    public string Username { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCurrentUser();
        if (user == null)
        {
            return;
        }
        User = await userService.GetByUsername(user.Username);
        Invites = organisationService.GetInvitesForUser(User.Id);
    }

    private void Submit()
    {
        OrganisationRequest.OwnerId = User.Id;
        var organisation = organisationService.CreateNewOrganisation(OrganisationRequest);

        if (organisation != null)
        {
            ShowToast("Successfully created an organisation", MatToastType.Info, "Success", false);
        }


    }

    private async Task Invite()
    {
        var user = await userService.GetByUsername(Username);

        if (user == null)
        {
            ShowToast("User was not found", MatToastType.Warning, "Warning", false);
            return;
        }

        var inviteRequest = new InviteRequest
        {
            OrganisationId = CurrentOrganisation.Id,
            Username = Username
        };

        var organisation = organisationService.InviteUserToOrganisation(inviteRequest);

        if (organisation != null)
        {
            ShowToast("Successfully created an invite to organisation", MatToastType.Info, "Success", false);
        }
    }

    public class InviteRequest
    {
        public string OrganisationId { get; set; }
        public string Username { get; set; }
    }

    private void ShowToast(string text, MatToastType type, string title, bool requireInteraction)
    {
        Toaster.Add(text, type, title, null, config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;

            //config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(5000);
            config.RequireInteraction = requireInteraction;
            //config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            if (requireInteraction)
            {
                config.Onclick = toast => Task.CompletedTask;
            }
        });
    }

    private async Task AcceptInvite(Invite invite)
    {
        var inviteRequest = new InviteResponseRequest
        {
            InviteId = invite.Id,
            OrganisationId = invite.Organisation.Id,
            UserId = invite.User.Id,
            Status = InviteStatus.Accepted
        };

        var respo = organisationService.RespondToInvite(invite.Id, inviteRequest);

        if (respo != null)
        {
            ShowToast($"Successfully joined {invite.Organisation.Title}", MatToastType.Info, "Success", false);
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).MarkUserAsLoggedOut();
            var user = await userService.GetByUsername(User.Username);
            User = user;
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(User);

            var serialized = JsonConvert.SerializeObject(User);
            await SessionStorageService.SetItemAsync("user", serialized);
        }
        else
        {
            ShowToast($"Failed to join {invite.Organisation.Title}", MatToastType.Warning, "Warning", false);
        }
    }

    private void RejectInvite(Invite invite)
    {
        var inviteRequest = new InviteResponseRequest
        {
            InviteId = invite.Id,
            OrganisationId = invite.Organisation.Id,
            UserId = invite.User.Id,
            Status = InviteStatus.Rejected
        };

        var respo = organisationService.RespondToInvite(invite.Id, inviteRequest);

        if (respo != null)
        {
            ShowToast($"Successfully rejected {invite.Organisation.Title}", MatToastType.Info, "Success", false);
        }
        else
        {
            ShowToast($"Failed to reject {invite.Organisation.Title}", MatToastType.Warning, "Warning", false);
        }

    }

    public class InviteResponseRequest
    {
        public string InviteId { get; set; }
        public string OrganisationId { get; set; }
        public string UserId { get; set; }
        public InviteStatus Status { get; set; }
    }

    private void SubmitReviewers()
    {
        CurrentOrganisation = organisationService.SetReviewerCount(CurrentOrganisation.Id, selectedCount.ToString());
        selectedCount = CurrentOrganisation.RequiredReviewerCount;
    }

    private void OpenOrganisationMemberView()
    {
        if (ManageOrganisationMembers == false)
        {
            CurrentOrganisation = organisationService.GetById(SelectedOrganisation.Id);

            
            if (CurrentOrganisation.Contracts.Any())
            {
                ReviewerCount = Enumerable.Range(0, CurrentOrganisation.Contracts.Count).ToList();
                selectedCount = CurrentOrganisation.RequiredReviewerCount;
            }
        }

        ManageOrganisationMembers = !ManageOrganisationMembers;


    }

}
