@using TravelManagerFE.Data.Models
@using Humanizer
<h3>Edit Visit</h3> <br/>
@page "/tripDetails/{tripId}/editVisit/{id}"
@inject TripService TripService
@inject NavigationManager NavigationManager

<div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 1500px;">
    <div class="mat-layout-grid-inner" style="display:block;">
        <div class="mat-layout-grid-cell" style="float: left; width: 300px;">
            <EditForm Model="Visit.Location">
                <p>
                    <MatTextField @bind-Value="Visit.Location.Title" HelperText="Title" Label="Title"></MatTextField>
                </p>
                <p>
                    <MatSelect HelperText="" HelperTextPersistent="true" Label="Pick the type of the trip" @bind-Value="@Visit.Location.Type">
                        <MatOptionString></MatOptionString>
                        <MatOptionString Value="geos">Geographical object</MatOptionString>
                        <MatOptionString Value="lodging">Lodging</MatOptionString>
                        <MatOptionString Value="things_to_do">Things to do</MatOptionString>
                    </MatSelect>
                </p>
                <p>
                    <MatTextField @bind-Value="Visit.Location.Address" HelperText="Address" Label="Address"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="Visit.Location.Latitude" HelperText="Latitude" Label="Latitude"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="Visit.Location.Longtitude" HelperText="Longtitude" Label="Longtitude"></MatTextField>
                </p>
            </EditForm>
            <MatButton @onclick="DisplayDestinationSearch">Search for location</MatButton>
        </div>
        <div class="mat-layout-grid-cell" style="float: left; width: 350px;">
            <EditForm Model="Visit">
                <MatDatePicker @bind-Value="Visit.Arrival" HelperText="Arrival" EnableTime="true" Enable24hours="true"></MatDatePicker>
                <MatDatePicker @bind-Value="Visit.Departure" HelperText="Departure" EnableTime="true" Enable24hours="true"></MatDatePicker>
            </EditForm>
            <MatButton @onclick="UpdateVisit">Submit</MatButton>
        </div>
        @if (Trip != null)
        {
            <h4>Other visits</h4> <br/>
            <div class="mat-layout-grid-cell" style="float: left; width: 800px; overflow-y: auto; overflow-x: hidden">
                
                @foreach (var visit in Trip.Visits.OrderBy(v=>v.VisitationIndex))
                {
                    <p>@visit.Location.Title
                    @if (visit.Id == Id)
                    {
                        <b>(currently reviewing this visit)</b>
                    }
                        </p>
                    <p style="font-size: 80%;">Arriving at @visit.Arrival.ToLocalTime(), departing at @visit.Departure.ToLocalTime()</p>
                    <MatDivider></MatDivider>
                }
            </div>
        }
    </div>
</div>

@if (DestinationSearchShown)
{
    <DestinationSearch OnClick="ClickHandler"></DestinationSearch>
}

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string TripId { get; set; }

    public Trip Trip { get; set; } = new Trip();
    public Visit Visit { get; set; } = new Visit();

    private bool DestinationSearchShown { get; set; }

    private void DisplayDestinationSearch() => DestinationSearchShown = !DestinationSearchShown;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DestinationSearchShown = false;
        Visit = TripService.GetVisitById(Id);
        Trip = TripService.GetTrip(TripId);
    }


    void ClickHandler(Location locationReq)
    {
        //var locationResult = TripService.AddLocation(trip.Id, location);

        //var visit = new VisitRequest
        //{
        //    Arrival = destinationRequest.Arrival,
        //    Departure = destinationRequest.Departure,
        //    LocationId = locationResult.Id,
        //    TripId = trip.Id
        //};

        //trip = TripService.AddDestinationToTrip(visit);

        Visit.Location = TripService.AddLocation(Id, locationReq);
    }

    private void UpdateVisit()
    {

        var visit = new VisitRequest
        {
            Arrival = Visit.Arrival,
            Departure = Visit.Departure,
            LocationId = Visit.Location.Id,
            TripId = Visit.Trip.Id
        };

        TripService.UpdateVisit(Id, visit);
        NavigationManager.NavigateTo($"tripDetails/{Visit.Trip.Id}");
    }

}
